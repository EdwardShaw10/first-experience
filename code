兼容不同浏览器

window.onload = f1; 						// 注册load事件类型
if(document.addEventListener){ 			// 兼容DOM标准
    document.addEventListener("DOMContentLoaded", f, false); 
	// 注册DOMContentLoaded事件类型
}
function f(){
    alert("我提前执行了");
}
function f1(){
    alert("页面初始化完毕");
}

if(window.ActiveXObject){ 						// 兼容IE浏览器
    document.write("<script id=ie_onload defer src=javascript:void(0)><\/script>");							// 写入脚本标签
    document.getElementById("ie_onload").onreadystatechange=function(){
    // 判断脚本标签的状态
        if(this.readyState == "complete"){
		// 如果状态为完成，则说明文档结构加载已完毕
            this.onreadystatechange = null; 		// 清空当前方法
            f();	// 调用预先执行的回调函数
        }
    }
}
 

if (/WebKit/i.test(navigator.userAgent)){ 		// 兼容Safari浏览器
    var _timer = setInterval(function(){		// 定义时间监测器
        if (/loaded|complete/.test(document.readyState)) {
		// 如果当前状态显示完成
            clearInterval(_timer); 				// 清除时间监测器
            f();									// 调用预先执行的回调函数
        }
    }, 10);
}


调整内容随窗口比例变化
var box = document.getElementById("box");		// �ｷ����絖���綣�������
box.style.position = "absolute";				// 膸�絲劫�篏�
box.style.backgroundColor = "red";		// ������
box.style.width = w() * 0.8 + "px";	// 莅丞舟��絖�絎遵墾筝榊����綺���0.8��
box.style.height = h() * 0.8 + "px";	// 莅丞舟��絖�蕭�綺�減腦����綺���0.8��
window.onresize = function(){	// 羈���resize篋�篁九����醇�逸�����莪��雁��絖�紊у��
    box.style.width = w() * 0.8 + "px";
    box.style.height = h() * 0.8 + "px";
}
function w(){					// �ｷ��腦����綺�
    if (window.innerWidth) 		// �弱�DOM
        return window.innerWidth;
    else if ((document.body) && (document.body.clientWidth)) 
	// �弱�IE
        return document.body.clientWidth;
}
function h(){					// �ｷ��腦����綺�
    if (window.innerHeight) 	// �弱�DOM
        return window.innerHeight;
    else if ((document.body) && (document.body.clientHeight)) 
	// �弱�IE
        return document.body.clientHeight;
}


错误捕获

window.onerror = function(message){ 		// 捕获浏览器错误行为
   alert("错误原因：" + arguments[0]+ 
       "\n错误URL: " +  arguments[1] + 
       "\n错误行号: " + arguments[2]
    );
   return true; 							// 禁止浏览器显示标准出错信息
}
a.innerHTML = "";							// 制造错误机会



选择文本复制
var a = document.getElementsByTagName("input")[0]; 
	// 获取第一个文本框的引用指针
var b = document.getElementsByTagName("input")[1]; 
	// 获取第二个文本框的引用指针
a.onselect = function(){		// 为第一个文本框绑定select事件处理函数
    if (document.selection){ 	// 兼容IE
        o = document.selection.createRange();	// 创建一个选择区域
        if(o.text.length > 0) 	// 如果选择区域内存在文本
        b.value = o.text; 		// 则把该区域内的文本赋值给第二个文本框
    }else{						// 兼容DOM
        p1 = a.selectionStart; 	// 获取文本框中选择的初始位置
        p2 = a.selectionEnd; 	// 获取文本框中选择的结束位置
        b.value = a.value.substring(p1, p2); 
		// 截取文本框中被选取的文本字符串，然后赋值给第二个文本框
    }


禁止表单提交
var t = document.getElementsByTagName("input")[0]; 	// 获取文本框的引用指针
var f = document.getElementsByTagName("form")[0]; 	// 获取表单的引用指针
f.onsubmit = function(e){
	if(t.value.length < 1){
		var  event = e || window.event;
        if (event.preventDefault){
            event.preventDefault();
        } else {
            event.returnValue = false;
        }
	}
}
兼容浏览器，焦点自动
if (element.autofocus !== true){
	element.focus(); 
}

避免重复提交，给按钮设置不可用
<form id="myform"  method="post" action="javascript:alert('表单提交啦!')">
    <h3>反馈表</h3>
    <fieldset>
        <p>姓名: <input class="special" type="text" name="name"></p>
        <p>性别:
            <input type="radio"  name="sex" value="0">男
            <input type="radio"  name="sex" value="1">女 </p>
        <p>邮箱: <input type="text" name="email"></p>
        <p>网址：<input type="text" name="web"></p>
        <p>反馈意见: <textarea name="message" cols="30" rows="10"></textarea> </p>
        <p class="submit">
            <button type="submit" name="submit">提交表单</button>
        </p>
    </fieldset>
</form>

只允许客户输入数字
<body>
<form id="myform"  method="post" action="#">
	<input type="text" size="25" maxlength="50" value="123456">
</form>
<script>
var form = document.getElementById("myform");
var field1 = form.elements[0];
field1.onkeypress = function(event){
	event = event || window.event;
	if (typeof event.charCode == "number"){
		var charCode = event.charCode;
	} else {
		var charCode = event.keyCode;
	}	
	if (!/\d/.test(String.fromCharCode(charCode))){
		if (event.preventDefault){
			event.preventDefault();
		} else {
			event.returnValue = false;
		}
	}
}
</script>
</body>

var form = document.getElementById("myform");
var field1 = form.elements[0];

field1.onkeypress = function(event){
	event = event || window.event;
	if (typeof event.charCode == "number"){
		var charCode = event.charCode;
	} else {
		var charCode = event.keyCode;
	}	

	if (!/\d/.test(String.fromCharCode(charCode)) && charCode > 9 && !event.ctrlKey){
		if (event.preventDefault){
			event.preventDefault();
		} else {
			event.returnValue = false;
		} alert(1)
	}
}

添加样式
<style type="text/css">
#box { color:green; }
.red { color:red; }
.blue { color:blue; }
</style>
<script>
window.onload = function(){
	var styleSheets = document.styleSheets[0];			//获取样式表引用
	var index = styleSheets.length; 					//获取样式表中包含样式的个数
	if(styleSheets.insertRule){ 						//判断浏览器是否支持insertRule()方法
		//使用insertRule()方法在文档内部样式表中增加一个p标签选择符的样式，设置段落背景色为红色，字体颜色为白色，补白为一个字体大小。插入位置在样式表的末尾，
		styleSheets.insertRule("p{background-color:red;color:#fff;padding:1em;}", index);
	}else{										//如果哦浏览器不支持insertRule()方法
		styleSheets.addRule("P", "background-color:red;color:#fff;padding:1em;", index);
	}
}
</script>

</head>
<body>
<p>在样式表中增加样式操作</p>
</body>


获取当前样式
var p = document.getElementsByTagName("p")[0];
	    if( document.defaultView && document.defaultView.getComputedStyle)
		    p.innerHTML =  "背 景 色："+document.defaultView.getComputedStyle(p,null).backgroundColor+"<br>字体颜色："+document.defaultView.getComputedStyle(p,null).color;
	    else if( p.currentStyle)
		    p.innerHTML =  "背 景 色："+p.currentStyle.backgroundColor+"<br>字体颜色："+p.currentStyle.color;
	    else
	        	p.innerHTML =  "当前浏览器无法获取最终显示样式";


兼容浏览器返回属性值
/ 获取指定元素的样式属性值
// 参数：e表示具体的元素，n表示要获取元素的脚本样式的属性名，如"width"、"borderColor"
// 返回值：返回该元素e的样式属性n的值
function getStyle(e,n){
    if(e.style[n]){ 
	// 如果在Style对象中存在，说明已显式定义，则返回这个值
        return e.style[n];
    }
    else if(e.currentStyle){ 
	// 否则，如果是IE浏览器，则利用它的私有方法读取当前值
        return e.currentStyle[n];
    }
    // 如果是支持DOM标准的浏览器，则利用DOM定义的方法读取样式属性值
    else if(document.defaultView && document.defaultView.getComputedStyle){
        n = n.replace(/([A-Z])/g,"-$1");	// 转换参数的属性名
        n = n.toLowerCase();
        var s = document.defaultView.getComputedStyle(e,null); 
		// 获取当前元素的样式属性对象
        if(s) 							// 如果当前元素的样式属性对象存在
            return s.getPropertyValue(n); 	// 则获取属性值
    }
    else									// 如果都不支持，则返回null
        return null;
}


转换属性值为整数
// 把fromStyle ()函数返回值转换为实际的值
// 参数：e表示具体的元素，w表示元素的样式属性值，通过getStyle()函数获取，p表示当前元素百分比转换为小数的值，以便在上级元素中计算当前元素的尺寸
// 返回值：返回具体的数字值
function fromStyle(e, w, p){ 
    var p = arguments[2]; 			// 获取百分比转换后的小数值
    if( ! p) p = 1; 				// 如果不存在，则默认其为1
    if(/px/.test(w) && parseInt(w) ) return parseInt(parseInt(w) * p); 
	// 如果元素尺寸的值为具体的像素值，则直接转换为数字，并乘以百分比值，并返回该值
    else if(/\%/.test(w) && parseInt(w)){ 	// 如果元素宽度值为百分比值
        var b = parseInt(w) / 100; 			// 则把该值转换为小数值
        if((p != 1) && p) b *= p; 
		// 如果子元素的尺寸也是百分比，则乘以转换后的小数值
        e = e.parentNode; 					// 获取父元素的引用指针
        if(e.tagName == "BODY") throw new Error("整个文档结构都没有定义固定尺寸，没法计算了，请使用其他方法获取尺寸."); 
	// 如果父元素是body元素，则抛出异常
        w = getStyle(e, "width"); 
		// 调用getStyle()方法，获取父元素的宽度值
        return arguments.callee(e, w, b); 
	// 回调函数，把上面的值作为参数进行传递，实现迭代计算
    }
    else if(/auto/.test(w)){ 				// 如果元素宽度值为默认值
        var b = 1; 	// 定义百分比值为1
        if((p != 1) && p) b *= p; 
	// 如果子元素的尺寸是百分比，则乘以转换后的小数值
        e = e.parentNode; 					// 获取父元素的引用指针
        if(e.tagName == "BODY") throw new Error("整个文档结构都没有定义固定尺寸，没法计算了，请使用其他方法获取尺寸.");
 	// 如果父元素是body元素，则抛出异常
        w = getStyle(e, "width");
		// 调用getStyle()方法，获取父元素的宽度值
        return arguments.callee(e, w , b); 	// 回调函数，实现迭代计算
    }
    else	
        throw new Error("元素或其父元素的尺寸定义了特殊的单位.");
}




// 获取指定元素的样式属性值
// 参数：e表示具体的元素，n表示要获取元素的脚本样式的属性名，如"width"、"borderColor"
// 返回值：返回该元素e的样式属性n的值
function getStyle(e,n){
    if(e.style[n]){ 
	// 如果在Style对象中存在，说明已显式定义，则返回这个值
        return e.style[n];
    }
    else if(e.currentStyle){ 
	// 否则，如果是IE浏览器，则利用它的私有方法读取当前值
        return e.currentStyle[n];
    }
    // 如果是支持DOM标准的浏览器，则利用DOM定义的方法读取样式属性值
    else if(document.defaultView && document.defaultView.getComputedStyle){
        n = n.replace(/([A-Z])/g,"-$1");	// 转换参数的属性名
        n = n.toLowerCase();
        var s = document.defaultView.getComputedStyle(e,null); 
		// 获取当前元素的样式属性对象
        if(s) 							// 如果当前元素的样式属性对象存在
            return s.getPropertyValue(n); 	// 则获取属性值
    }
    else									// 如果都不支持，则返回null
        return null;
}


// 把fromStyle ()函数返回值转换为实际的值
// 参数：e表示具体的元素，w表示元素的样式属性值，通过getStyle()函数获取，p表示当前元素百分比转换为小数的值，以便在上级元素中计算当前元素的尺寸
// 返回值：返回具体的数字值
function fromStyle(e, w, p){ 
    var p = arguments[2]; 			// 获取百分比转换后的小数值
    if( ! p) p = 1; 				// 如果不存在，则默认其为1
    if(/px/.test(w) && parseInt(w) ) return parseInt(parseInt(w) * p); 
	// 如果元素尺寸的值为具体的像素值，则直接转换为数字，并乘以百分比值，并返回该值
    else if(/\%/.test(w) && parseInt(w)){ 	// 如果元素宽度值为百分比值
        var b = parseInt(w) / 100; 			// 则把该值转换为小数值
        if((p != 1) && p) b *= p; 
		// 如果子元素的尺寸也是百分比，则乘以转换后的小数值
        e = e.parentNode; 					// 获取父元素的引用指针
        if(e.tagName == "BODY") throw new Error("整个文档结构都没有定义固定尺寸，没法计算了，请使用其他方法获取尺寸."); 
	// 如果父元素是body元素，则抛出异常
        w = getStyle(e, "width"); 
		// 调用getStyle()方法，获取父元素的宽度值
        return arguments.callee(e, w, b); 
	// 回调函数，把上面的值作为参数进行传递，实现迭代计算
    }
    else if(/auto/.test(w)){ 				// 如果元素宽度值为默认值
        var b = 1; 	// 定义百分比值为1
        if((p != 1) && p) b *= p; 
	// 如果子元素的尺寸是百分比，则乘以转换后的小数值
        e = e.parentNode; 					// 获取父元素的引用指针
        if(e.tagName == "BODY") throw new Error("整个文档结构都没有定义固定尺寸，没法计算了，请使用其他方法获取尺寸.");
 	// 如果父元素是body元素，则抛出异常
        w = getStyle(e, "width");
		// 调用getStyle()方法，获取父元素的宽度值
        return arguments.callee(e, w , b); 	// 回调函数，实现迭代计算
    }
    else	
        throw new Error("元素或其父元素的尺寸定义了特殊的单位.");
}

</script>
<script>

// 重设元素的样式属性值
// 参数：e表示重设样式的元素，o表示要设置的值，它是一个对象，可以包含多个名值对
// 返回值：重设样式的原属性值，以对象形式返回
function setCSS(e, o){
    var a = {};					// 定义临时对象直接量
    for(var i in o){ 			// 遍历参数对象，传递包含样式设置值
        a[i] = e.style[i]; 		// 先存储样式表中原来的值
        e.style[i] = o[i]; 		// 用参数值覆盖原来的值
    }
    return a; 					// 返回原样式属性值
}
// 恢复元素的样式属性值
// 参数：e表示重设样式的元素，o表示要恢复的值，它是一个对象，可以包含多个名值对
// 返回值：无
function resetCSS(e,o){
    for(var i in o){ 			// 遍历参数对象
        e.style[i] = o[i]; 		// 恢复原来的样式值
    }
}

// 获取元素的存在宽度
// 参数：e表示元素
// 返回值：存在宽度
function getW(e){
    // 如果元素没有隐藏显示，则获取它的宽度，如果offsetWidth属性值存在，则返回该值，否则调用自定义扩展函数getStyle()和fromStyle()获取元素的宽度
    if(getStyle(e,"display") != "none") return e.offsetWidth || 
fromStyle(getStyle(e,"width"));
    var r = setCSS( e, {
	// 如果元素隐藏，则调用setCSS()函数临时显示元素，并存储原始样式属性值
        display:"",
        position:"absolute",
        visibility:"hidden"
    });
    var w = e.offsetWidth || fromStyle(getStyle(e,"width"));
	// 读取元素的宽度值
    resetCSS(e,r); 				// 调用resetCSS()函数恢复元素的样式属性值
    return w; 					// 返回存在宽度
}
// 获取元素的存在高度
// 参数：e表示元素
// 返回值：存在高度
function getH(e){
    // 如果元素没有隐藏显示，则获取它的高度，如果offsetHeight属性值存在，则返回该值，否则调用自定义扩展函数getStyle()和fromStyle()获取元素的高度
    if(getStyle(e,"display") != "none") return e.offsetHeight || 
fromStyle(getStyle(e,"height"));
    var r = setCSS( e, {
	// 如果元素隐藏，则调用setCSS()函数临时显示元素，并存储原始样式属性值
        display:"",
        position:"absolute",
        visibility:"hidden"
    });
    var h = e.offsetHeight || fromStyle(getStyle(e,"height"));
	// 读取元素的高度值
    resetCSS(e,r); 			// 调用resetCSS()函数恢复元素的样式属性值
    return h; 				// 返回存在高度
}


</script>
</head>
<body>

<div id="div" style="height:200px;width:200px;border-style:solid;display:none;"></div>
<script>
var div = document.getElementById("div");
var w = div.offsetWidth; 				// 返回0
var h = div.offsetHeight;			 	// 返回0
var w1 = getW(div); 					// 返回206
var h1 = getH(div); 					// 返回206

alert(w);
alert(w1);



获取窗口尺寸
var w = document.documentElement.clientWidth || document.body.clientWidth;
var h = document.documentElement.clientHeight || document.body.clientHeight;




获取元素距离窗口左上角的坐标
// 获取指定元素距离窗口左上角偏移坐标
// 参数：e表示获取位置的元素
// 返回值：返回对象直接量，其中属性x表示x轴偏移距离，属性y表示y轴偏移距离
function getPoint(e){
    var x = y = 0; 			// 初始化临时变量
    while(e.offsetParent){
 	// 如果存在offsetParent指代的元素，则获取它的偏移坐标
        x += e.offsetLeft; 	// 累计总的x轴偏移距离
        y += e.offsetTop; 	// 累计总的y轴偏移距离
        e = e.offsetParent;
 	// 把当前元素的offsetParent属性值传递给循环条件表达式
    }
    return {
	// 遍历到body元素后，将停止循环，把叠加的值赋值给对象直接量，并返回该对象
        "x" : x, 
        "y" : y
    };
}






获取元素相对于父级的距离
/ 获取指定元素距离窗口左上角偏移坐标
// 参数：e表示获取位置的元素
// 返回值：返回对象直接量，其中属性x表示x轴偏移距离，属性y表示y轴偏移距离
function getPoint(e){
    var x = y = 0; 			// 初始化临时变量
    while(e.offsetParent){
 	// 如果存在offsetParent指代的元素，则获取它的偏移坐标
        x += e.offsetLeft; 	// 累计总的x轴偏移距离
        y += e.offsetTop; 	// 累计总的y轴偏移距离
        e = e.offsetParent;
 	// 把当前元素的offsetParent属性值传递给循环条件表达式
    }
    return {
	// 遍历到body元素后，将停止循环，把叠加的值赋值给对象直接量，并返回该对象
        "x" : x, 
        "y" : y
    };
}

// 获取指定元素距离父元素左上角的偏移坐标
// 参数：e表示获取位置的元素
// 返回值：返回对象直接量，其中属性x表示x轴偏移距离，属性y表示y轴偏移距离
function getP(e){
    if(e.parentNode == e.offsetParent){ 
	// 判断offsetParent属性是否指向父级元素
        var x = e.offsetLeft; 		// 如果是，则直接读取offsetLeft属性值
        var y = e.offsetTop ; 		// 读取offsetTop属性值
    }
    else{
	// 否则调用getW()扩展函数获取当前元素和父元素的x轴坐标，并返回它们的差值
        var o = getPoint(e);
        var p = getPoint(e.parentNode);
        var x = o.x - p.x;
        var y = o.y - p.y;
    }
    return {			// 返回对象直接量，对象包含当前元素距离父元素的坐标
        "x" : x, 
        "y" : y
    }; 
}




获取当前CSSleft和top的值
// 获取指定元素的样式属性值
// 参数：e表示具体的元素，n表示要获取元素的脚本样式的属性名，如"width"、"borderColor"
// 返回值：返回该元素e的样式属性n的值
function getStyle(e,n){
    if(e.style[n]){ 
	// 如果在Style对象中存在，说明已显式定义，则返回这个值
        return e.style[n];
    }
    else if(e.currentStyle){ 
	// 否则，如果是IE浏览器，则利用它的私有方法读取当前值
        return e.currentStyle[n];
    }
    // 如果是支持DOM标准的浏览器，则利用DOM定义的方法读取样式属性值
    else if(document.defaultView && document.defaultView.getComputedStyle){
        n = n.replace(/([A-Z])/g,"-$1");	// 转换参数的属性名
        n = n.toLowerCase();
        var s = document.defaultView.getComputedStyle(e,null); 
		// 获取当前元素的样式属性对象
        if(s) 							// 如果当前元素的样式属性对象存在
            return s.getPropertyValue(n); 	// 则获取属性值
    }
    else									// 如果都不支持，则返回null
        return null;
}



元素相对自身移动
// 获取指定元素距离定位包含框元素左上角的偏移坐标
// 参数：e表示获取位置的元素
// 返回值：返回对象直接量，其中属性x表示x轴偏移距离，属性y表示y轴偏移距离
function getB(e){
    return {
        "x" : (parseInt(getStyle(e, "left")) || 0) ,
        "y" : (parseInt(getStyle(e, "top")) || 0) 
    };
}
// 设置元素的偏移位置，即相对于上级定位元素为参照对象定位元素的位置 
// 参数：e表示设置位置的元素，o表示一个对象，对象包含的属性x代表x轴距离，属性y代表y轴距离，不用附带单位，默认以像素为单位
// 返回值：无
function setP(e,o){
    (e.style.position) || (e.style.position = "absolute");
	// 如果元素静态显示，则对其进行绝对定位
    e.style.left = o.x + "px";			// 设置x轴的距离
    e.style.top = o.y + "px";			// 设置y轴的距离

// 设置元素的相对位置，即相对于当前位置进行偏移
// 参数：e表示设置位置的元素，o表示一个对象，对象包含的属性x代表x轴偏移距离，属性y代表y轴偏移距离，不用附带单位，默认以像素为单位
// 返回值：无
function offsetP(e, o){
    (e.style.position) || (e.style.position = "absolute");
	// 如果元素静态显示，则对其进行绝对定位
    e.style.left = getB(e).x + o.x + "px";		// 设置x轴的距离
    e.style.top = getB(e).y + o.y + "px";		// 设置y轴的距离
    
    
    
    
    
  显示隐藏元素  
    // 设置或切换元素的显示或隐藏
// 参数：e表示要显示或隐藏的元素，b是一个布尔值，当为ture时，将显示元素e；当为false时，将隐藏元素e。如果省略参数b，则根据元素e的显示状态，进行显示或隐藏切换
// 返回值：无
function display(e, b){
    // 监测第二个参数的类型。如果该参数存在且不为布尔值，则抛出异常
    if(b && (typeof b != "boolean")) throw new Error("第二个参数应该是布尔值!");
    var c = getStyle(e, "display");		// 获取当前元素的显示属性值
    (c != "none") && (e._display = c);
 	// 记录元素的显示性质，并存储到元素的属性中
    e._display = e._display || "";
	// 如果没有定义显示性质，则赋值为空字符串
    if(b || (c == "none") ){ 		// 当第二个参数值为true，或者元素隐藏时
        e.style.display = e._display; 
	// 则将调用元素的_display属性值恢复元素或显示元素
    }
    else{
        e.style.display = "none";	// 否则隐藏元素
    }
}



// 设置元素的透明度
// 参数：e表示要预设置的元素，n表示一个数值，取值范围为0~100，如果省略，则默认为100，即不透明显示元素
// 返回值：无
function setOpacity(e, n){
    var n = parseFloat(n); 		// 把第二个参数转换为浮点数
    if(n && (n>100) || !n) n=100; 
	// 如果第二个参数存在且值大于100，或者不存在该参数，则设置其为100
    if(n && (n<0))  n =0; 		// 如果第二个参数存在且值小于0，则设置其为0
    if (e.filters){ 			// 兼容IE浏览器
        e.style.filter = "alpha(opacity=" + n + ")";
    }
    else{						// 兼容DOM标准
        e.style.opacity = n / 100;
    }
}

// 获取元素的透明度
// 参数：e表示要预设置的元素
// 返回值：元素的透明度值，范围在1~100之间
function getOpacity(e){
    var r;
    if ( ! e.filters){
        if (e.style.opacity) return parseFloat(e.style.opacity) * 100;
    }
    try{
        return e.filters.item('alpha').opacity
    }
    catch(o){
        return 100;
    }
}







// 获取指定元素的样式属性值
// 参数：e表示具体的元素，n表示要获取元素的脚本样式的属性名，如"width"、"borderColor"
// 返回值：返回该元素e的样式属性n的值
function getStyle(e,n){
    if(e.style[n]){ 
	// 如果在Style对象中存在，说明已显式定义，则返回这个值
        return e.style[n];
    }
    else if(e.currentStyle){ 
	// 否则，如果是IE浏览器，则利用它的私有方法读取当前值
        return e.currentStyle[n];
    }
    // 如果是支持DOM标准的浏览器，则利用DOM定义的方法读取样式属性值
    else if(document.defaultView && document.defaultView.getComputedStyle){
        n = n.replace(/([A-Z])/g,"-$1");	// 转换参数的属性名
        n = n.toLowerCase();
        var s = document.defaultView.getComputedStyle(e,null); 
		// 获取当前元素的样式属性对象
        if(s) 							// 如果当前元素的样式属性对象存在
            return s.getPropertyValue(n); 	// 则获取属性值
    }
    else									// 如果都不支持，则返回null
        return null;
}


元素滑动
// 获取指定元素距离定位包含框元素左上角的偏移坐标
// 参数：e表示获取位置的元素
// 返回值：返回对象直接量，其中属性x表示x轴偏移距离，属性y表示y轴偏移距离
function getB(e){
    return {
        "x" : (parseInt(getStyle(e, "left")) || 0) ,
        "y" : (parseInt(getStyle(e, "top")) || 0) 
    };
}


// 简单的滑动函数
// 参数：e表示元素，x和y表示要移动的最后坐标位置（相对包含块，t表示元素移动的步数
function slide(e, x, y, t){
    var t = t || 100;	// 初始化步数，步数越大，速度越慢，移动的过程越逼真，但是中间移动的误差就越明显
    var o = getB(e); 	// 当前元素的绝对定位坐标值
    var x0 = o.x;
    var y0 = o.y;
    var stepx = Math.round((x - x0) / t); 
	// 计算x轴每次移动的步长，由于像素点不可用小数，所以会存在一定的误差
    var stepy = Math.round((y - y0) / t); 	// 计算y轴每次移动的步长
    var out =  setInterval(function(){	// 设计定时器
        var o = getB(e); 				// 获取每次移动后的绝对定位坐标值
        var x0 = o.x;
        var y0 = o.y;
        e.style["left"] = (x0 + stepx) + 'px'; 	// 定位每次移动的位置
        e.style["top"] = (y0 + stepy) + 'px'; 	// 定位每次移动的位置
        if (Math.abs(x - x0) <= Math.abs(stepx) || Math.abs(y - y0) <= 
Math.abs(stepy)) {	// 如果距离终点坐标的距离小于步长，则停止循环执行，并校正元素的最终坐标位置
            e.style["left"] = x + 'px';
            e.style["top"] = y + 'px';
            clearTimeout(out);
        };
    }, 2)
};






渐隐渐显效果
// 设置元素的透明度
// 参数：e表示要预设置的元素，n表示一个数值，取值范围为0~100，如果省略，则默认为100，即不透明显示元素
// 返回值：无
function setOpacity(e, n){
    var n = parseFloat(n); 		// 把第二个参数转换为浮点数
    if(n && (n>100) || !n) n=100; 
	// 如果第二个参数存在且值大于100，或者不存在该参数，则设置其为100
    if(n && (n<0))  n =0; 		// 如果第二个参数存在且值小于0，则设置其为0
    if (e.filters){ 			// 兼容IE浏览器
        e.style.filter = "alpha(opacity=" + n + ")";
    }
    else{						// 兼容DOM标准
        e.style.opacity = n / 100;
    }
}

// 获取元素的透明度
// 参数：e表示要预设置的元素
// 返回值：元素的透明度值，范围在1~100之间
function getOpacity(e){
    var r;
    if ( ! e.filters){
        if (e.style.opacity) return parseFloat(e.style.opacity) * 100;
    }
    try{
        return e.filters.item('alpha').opacity
    }
    catch(o){
        return 100;
    }
}
渐隐渐显动画显示函数
// 参数：e表示渐隐渐显元素，t表示渐隐渐显的速度，值越大渐隐渐显速度越慢，io表示渐隐或渐显方式，取值true表示渐显，取值false表示渐隐
function fade(e, t, io){
    var t = t || 10;					// 初始化渐隐渐显速度
    if(io){	// 初始化渐隐渐显方式
        var i = 0;
    }else{
        var i = 100;
    }
    var out = setInterval(function(){	// 设计定时器
        setOpacity(e, i);				// 调用setOpacity()函数
        if(io) {							// 根据渐隐或渐显方式决定执行效果
            i ++ ;
            if(i >= 100)  clearTimeout(out);
        }
        else{
            i-- ;
            if(i <= 0)  clearTimeout(out);
        }
    }, t);
}









json数据梳理
//【示例1】下面代码使用JSON.parse将JSON字符串转换成对象。
var jsontext = '{"name":"张三","qq":"111111111","phone":["010-66666666","010-88888888"]}';
var contact = JSON.parse(jsontext);
document.write(contact.name + ", " + contact.qq);// 输出：张三, 111111111

//【示例2】可选参数reviver是一个带有key和value两个参数的函数，其作用于结果，让过滤和转换返回值成为可能。例如，下面示例将把字符串'{"a": "1.5", "b": "2.3"}';转换为对象，然后通过int()函数对转换的对象成员值进行处理，确保每个值都为整数。
var n = '{"a": "1.5", "b": "2.3"}';
var result = JSON.parse(n,int );
document.write(result.a); 					//输出：1
function  int(key, value){
    if (typeof value == 'string'){
        return parseInt(value);
    } else {
        return value; 
    }
} 

//【示例3】下面示例使用JSON.parse序列化ISO格式的日期字符串，在序列化过程中调用dateReviver()函数把每个成员的值进行转换，并返回Date格式的对象。
var jsontext2 = '{ "hiredate": "2015-01-01T12:00:00Z", "birthdate": "2015-12-25T12:00:00Z" }';  
var dates = JSON.parse(jsontext2, dateReviver);  
document.write(dates.birthdate.toUTCString());  //输出：Fri, 25 Dec 2015 12:00:00 UTC
function dateReviver(key, value) {  
    var a;  
    if (typeof value === 'string') {  
        a = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);  
        if (a) {  
            return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]));  
        }  
    }  
    return value;  
};







json对象数组转化为字符串
//【示例1】下面示例演示了如何使用JSON.stringify将数组转换成JSON字符串，然后使用JSON.parse将该字符串重新转换成数组。 
var arr = ["a", "b", "c"]; 
var str = JSON.stringify(arr); 
document.write(str); 			// ["a","b","c"]
document.write ("<br/>"); 
var newArr = JSON.parse(str); 
while (newArr.length > 0) { 
    document.write(newArr.pop() + "<br/>"); 
}
//【示例2】下面示例把对象nums转换为JSON字符串，然后传入replacer()函数过滤出即将被字符串化的对象中值为13的属性。
var nums = {
    "first": 7,
    "second": 14,
    "third": 13
}
var luckyNums = JSON.stringify(nums,replacer);
document.write(luckyNums); 			//{"first":7,"second":14}
function replacer(key, value){
    if (value == 13) {
        return undefined;
    } else {
        return value;
    }
} 
//【示例3】下面示例是在上面示例基础上，设置space参数值为4，格式化JSON字符串，设置水平缩进为4个空格数，显示效果如图23-2左图所示。如果不传递space参数值，则显示效果如图23-2右图所示。
var nums = {
    "first": 7,
    "second": 14,
    "third": 13
}
var luckyNums = JSON.stringify(nums,replacer,4);
document.write("<pre>" + luckyNums + "</pre>");
function replacer(key, value){
    if (value == 13) {
        return undefined;
    } else {
        return value;
    }
}
//【示例4】下面示例使用JSON.stringify将contact对象转换为JSON 文本，定义memberfilter数组以便只转换name、sex和tel成员，同时排序显示为name、sex和tel，显示效果如图23-3所示。
var contact = {
    qq : "111111111",
	name : "张三",
	tel : "13555556666",
	sex : "men",
	url : "http://www.mysite.cn/"
}
var memberfilter = ["name","sex","tel"];
var jsonText = JSON.stringify(contact, memberfilter, "\t");
document.write("<pre>" + jsonText + "</pre>");
//【示例5】下面示例使用JSON.stringify将一个数组进行转换，调用replaceToUpper 函数将数组中的每个字符串转换为大写形式。
var continents = ["Europe","Asia","Australia","Antarctica","North America","South America","Africa"];
var jsonText = JSON.stringify(continents, replaceToUpper);
function replaceToUpper(key, value) {
    return value.toString().toUpperCase();
}
document.write(jsonText);		//输出："EUROPE,ASIA,AUSTRALIA,ANTARCTICA,NORTH AMERICA,SOUTH AMERICA,AFRICA"

