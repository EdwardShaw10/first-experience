兼容不同浏览器

window.onload = f1; 						// 注册load事件类型
if(document.addEventListener){ 			// 兼容DOM标准
    document.addEventListener("DOMContentLoaded", f, false); 
	// 注册DOMContentLoaded事件类型
}
function f(){
    alert("我提前执行了");
}
function f1(){
    alert("页面初始化完毕");
}

if(window.ActiveXObject){ 						// 兼容IE浏览器
    document.write("<script id=ie_onload defer src=javascript:void(0)><\/script>");							// 写入脚本标签
    document.getElementById("ie_onload").onreadystatechange=function(){
    // 判断脚本标签的状态
        if(this.readyState == "complete"){
		// 如果状态为完成，则说明文档结构加载已完毕
            this.onreadystatechange = null; 		// 清空当前方法
            f();	// 调用预先执行的回调函数
        }
    }
}
 

if (/WebKit/i.test(navigator.userAgent)){ 		// 兼容Safari浏览器
    var _timer = setInterval(function(){		// 定义时间监测器
        if (/loaded|complete/.test(document.readyState)) {
		// 如果当前状态显示完成
            clearInterval(_timer); 				// 清除时间监测器
            f();									// 调用预先执行的回调函数
        }
    }, 10);
}


调整内容随窗口比例变化
var box = document.getElementById("box");		// �ｷ����絖���綣�������
box.style.position = "absolute";				// 膸�絲劫�篏�
box.style.backgroundColor = "red";		// ������
box.style.width = w() * 0.8 + "px";	// 莅丞舟��絖�絎遵墾筝榊����綺���0.8��
box.style.height = h() * 0.8 + "px";	// 莅丞舟��絖�蕭�綺�減腦����綺���0.8��
window.onresize = function(){	// 羈���resize篋�篁九����醇�逸�����莪��雁��絖�紊у��
    box.style.width = w() * 0.8 + "px";
    box.style.height = h() * 0.8 + "px";
}
function w(){					// �ｷ��腦����綺�
    if (window.innerWidth) 		// �弱�DOM
        return window.innerWidth;
    else if ((document.body) && (document.body.clientWidth)) 
	// �弱�IE
        return document.body.clientWidth;
}
function h(){					// �ｷ��腦����綺�
    if (window.innerHeight) 	// �弱�DOM
        return window.innerHeight;
    else if ((document.body) && (document.body.clientHeight)) 
	// �弱�IE
        return document.body.clientHeight;
}


错误捕获

window.onerror = function(message){ 		// 捕获浏览器错误行为
   alert("错误原因：" + arguments[0]+ 
       "\n错误URL: " +  arguments[1] + 
       "\n错误行号: " + arguments[2]
    );
   return true; 							// 禁止浏览器显示标准出错信息
}
a.innerHTML = "";							// 制造错误机会



选择文本复制
var a = document.getElementsByTagName("input")[0]; 
	// 获取第一个文本框的引用指针
var b = document.getElementsByTagName("input")[1]; 
	// 获取第二个文本框的引用指针
a.onselect = function(){		// 为第一个文本框绑定select事件处理函数
    if (document.selection){ 	// 兼容IE
        o = document.selection.createRange();	// 创建一个选择区域
        if(o.text.length > 0) 	// 如果选择区域内存在文本
        b.value = o.text; 		// 则把该区域内的文本赋值给第二个文本框
    }else{						// 兼容DOM
        p1 = a.selectionStart; 	// 获取文本框中选择的初始位置
        p2 = a.selectionEnd; 	// 获取文本框中选择的结束位置
        b.value = a.value.substring(p1, p2); 
		// 截取文本框中被选取的文本字符串，然后赋值给第二个文本框
    }


禁止表单提交
var t = document.getElementsByTagName("input")[0]; 	// 获取文本框的引用指针
var f = document.getElementsByTagName("form")[0]; 	// 获取表单的引用指针
f.onsubmit = function(e){
	if(t.value.length < 1){
		var  event = e || window.event;
        if (event.preventDefault){
            event.preventDefault();
        } else {
            event.returnValue = false;
        }
	}
}
兼容浏览器，焦点自动
if (element.autofocus !== true){
	element.focus(); 
}

避免重复提交，给按钮设置不可用
<form id="myform"  method="post" action="javascript:alert('表单提交啦!')">
    <h3>反馈表</h3>
    <fieldset>
        <p>姓名: <input class="special" type="text" name="name"></p>
        <p>性别:
            <input type="radio"  name="sex" value="0">男
            <input type="radio"  name="sex" value="1">女 </p>
        <p>邮箱: <input type="text" name="email"></p>
        <p>网址：<input type="text" name="web"></p>
        <p>反馈意见: <textarea name="message" cols="30" rows="10"></textarea> </p>
        <p class="submit">
            <button type="submit" name="submit">提交表单</button>
        </p>
    </fieldset>
</form>

只允许客户输入数字
<body>
<form id="myform"  method="post" action="#">
	<input type="text" size="25" maxlength="50" value="123456">
</form>
<script>
var form = document.getElementById("myform");
var field1 = form.elements[0];
field1.onkeypress = function(event){
	event = event || window.event;
	if (typeof event.charCode == "number"){
		var charCode = event.charCode;
	} else {
		var charCode = event.keyCode;
	}	
	if (!/\d/.test(String.fromCharCode(charCode))){
		if (event.preventDefault){
			event.preventDefault();
		} else {
			event.returnValue = false;
		}
	}
}
</script>
</body>

var form = document.getElementById("myform");
var field1 = form.elements[0];

field1.onkeypress = function(event){
	event = event || window.event;
	if (typeof event.charCode == "number"){
		var charCode = event.charCode;
	} else {
		var charCode = event.keyCode;
	}	

	if (!/\d/.test(String.fromCharCode(charCode)) && charCode > 9 && !event.ctrlKey){
		if (event.preventDefault){
			event.preventDefault();
		} else {
			event.returnValue = false;
		} alert(1)
	}
}

添加样式
<style type="text/css">
#box { color:green; }
.red { color:red; }
.blue { color:blue; }
</style>
<script>
window.onload = function(){
	var styleSheets = document.styleSheets[0];			//获取样式表引用
	var index = styleSheets.length; 					//获取样式表中包含样式的个数
	if(styleSheets.insertRule){ 						//判断浏览器是否支持insertRule()方法
		//使用insertRule()方法在文档内部样式表中增加一个p标签选择符的样式，设置段落背景色为红色，字体颜色为白色，补白为一个字体大小。插入位置在样式表的末尾，
		styleSheets.insertRule("p{background-color:red;color:#fff;padding:1em;}", index);
	}else{										//如果哦浏览器不支持insertRule()方法
		styleSheets.addRule("P", "background-color:red;color:#fff;padding:1em;", index);
	}
}
</script>

</head>
<body>
<p>在样式表中增加样式操作</p>
</body>


获取当前样式
var p = document.getElementsByTagName("p")[0];
	    if( document.defaultView && document.defaultView.getComputedStyle)
		    p.innerHTML =  "背 景 色："+document.defaultView.getComputedStyle(p,null).backgroundColor+"<br>字体颜色："+document.defaultView.getComputedStyle(p,null).color;
	    else if( p.currentStyle)
		    p.innerHTML =  "背 景 色："+p.currentStyle.backgroundColor+"<br>字体颜色："+p.currentStyle.color;
	    else
	        	p.innerHTML =  "当前浏览器无法获取最终显示样式";


兼容浏览器返回属性值
/ 获取指定元素的样式属性值
// 参数：e表示具体的元素，n表示要获取元素的脚本样式的属性名，如"width"、"borderColor"
// 返回值：返回该元素e的样式属性n的值
function getStyle(e,n){
    if(e.style[n]){ 
	// 如果在Style对象中存在，说明已显式定义，则返回这个值
        return e.style[n];
    }
    else if(e.currentStyle){ 
	// 否则，如果是IE浏览器，则利用它的私有方法读取当前值
        return e.currentStyle[n];
    }
    // 如果是支持DOM标准的浏览器，则利用DOM定义的方法读取样式属性值
    else if(document.defaultView && document.defaultView.getComputedStyle){
        n = n.replace(/([A-Z])/g,"-$1");	// 转换参数的属性名
        n = n.toLowerCase();
        var s = document.defaultView.getComputedStyle(e,null); 
		// 获取当前元素的样式属性对象
        if(s) 							// 如果当前元素的样式属性对象存在
            return s.getPropertyValue(n); 	// 则获取属性值
    }
    else									// 如果都不支持，则返回null
        return null;
}


转换属性值为整数
// 把fromStyle ()函数返回值转换为实际的值
// 参数：e表示具体的元素，w表示元素的样式属性值，通过getStyle()函数获取，p表示当前元素百分比转换为小数的值，以便在上级元素中计算当前元素的尺寸
// 返回值：返回具体的数字值
function fromStyle(e, w, p){ 
    var p = arguments[2]; 			// 获取百分比转换后的小数值
    if( ! p) p = 1; 				// 如果不存在，则默认其为1
    if(/px/.test(w) && parseInt(w) ) return parseInt(parseInt(w) * p); 
	// 如果元素尺寸的值为具体的像素值，则直接转换为数字，并乘以百分比值，并返回该值
    else if(/\%/.test(w) && parseInt(w)){ 	// 如果元素宽度值为百分比值
        var b = parseInt(w) / 100; 			// 则把该值转换为小数值
        if((p != 1) && p) b *= p; 
		// 如果子元素的尺寸也是百分比，则乘以转换后的小数值
        e = e.parentNode; 					// 获取父元素的引用指针
        if(e.tagName == "BODY") throw new Error("整个文档结构都没有定义固定尺寸，没法计算了，请使用其他方法获取尺寸."); 
	// 如果父元素是body元素，则抛出异常
        w = getStyle(e, "width"); 
		// 调用getStyle()方法，获取父元素的宽度值
        return arguments.callee(e, w, b); 
	// 回调函数，把上面的值作为参数进行传递，实现迭代计算
    }
    else if(/auto/.test(w)){ 				// 如果元素宽度值为默认值
        var b = 1; 	// 定义百分比值为1
        if((p != 1) && p) b *= p; 
	// 如果子元素的尺寸是百分比，则乘以转换后的小数值
        e = e.parentNode; 					// 获取父元素的引用指针
        if(e.tagName == "BODY") throw new Error("整个文档结构都没有定义固定尺寸，没法计算了，请使用其他方法获取尺寸.");
 	// 如果父元素是body元素，则抛出异常
        w = getStyle(e, "width");
		// 调用getStyle()方法，获取父元素的宽度值
        return arguments.callee(e, w , b); 	// 回调函数，实现迭代计算
    }
    else	
        throw new Error("元素或其父元素的尺寸定义了特殊的单位.");
}




// 获取指定元素的样式属性值
// 参数：e表示具体的元素，n表示要获取元素的脚本样式的属性名，如"width"、"borderColor"
// 返回值：返回该元素e的样式属性n的值
function getStyle(e,n){
    if(e.style[n]){ 
	// 如果在Style对象中存在，说明已显式定义，则返回这个值
        return e.style[n];
    }
    else if(e.currentStyle){ 
	// 否则，如果是IE浏览器，则利用它的私有方法读取当前值
        return e.currentStyle[n];
    }
    // 如果是支持DOM标准的浏览器，则利用DOM定义的方法读取样式属性值
    else if(document.defaultView && document.defaultView.getComputedStyle){
        n = n.replace(/([A-Z])/g,"-$1");	// 转换参数的属性名
        n = n.toLowerCase();
        var s = document.defaultView.getComputedStyle(e,null); 
		// 获取当前元素的样式属性对象
        if(s) 							// 如果当前元素的样式属性对象存在
            return s.getPropertyValue(n); 	// 则获取属性值
    }
    else									// 如果都不支持，则返回null
        return null;
}


// 把fromStyle ()函数返回值转换为实际的值
// 参数：e表示具体的元素，w表示元素的样式属性值，通过getStyle()函数获取，p表示当前元素百分比转换为小数的值，以便在上级元素中计算当前元素的尺寸
// 返回值：返回具体的数字值
function fromStyle(e, w, p){ 
    var p = arguments[2]; 			// 获取百分比转换后的小数值
    if( ! p) p = 1; 				// 如果不存在，则默认其为1
    if(/px/.test(w) && parseInt(w) ) return parseInt(parseInt(w) * p); 
	// 如果元素尺寸的值为具体的像素值，则直接转换为数字，并乘以百分比值，并返回该值
    else if(/\%/.test(w) && parseInt(w)){ 	// 如果元素宽度值为百分比值
        var b = parseInt(w) / 100; 			// 则把该值转换为小数值
        if((p != 1) && p) b *= p; 
		// 如果子元素的尺寸也是百分比，则乘以转换后的小数值
        e = e.parentNode; 					// 获取父元素的引用指针
        if(e.tagName == "BODY") throw new Error("整个文档结构都没有定义固定尺寸，没法计算了，请使用其他方法获取尺寸."); 
	// 如果父元素是body元素，则抛出异常
        w = getStyle(e, "width"); 
		// 调用getStyle()方法，获取父元素的宽度值
        return arguments.callee(e, w, b); 
	// 回调函数，把上面的值作为参数进行传递，实现迭代计算
    }
    else if(/auto/.test(w)){ 				// 如果元素宽度值为默认值
        var b = 1; 	// 定义百分比值为1
        if((p != 1) && p) b *= p; 
	// 如果子元素的尺寸是百分比，则乘以转换后的小数值
        e = e.parentNode; 					// 获取父元素的引用指针
        if(e.tagName == "BODY") throw new Error("整个文档结构都没有定义固定尺寸，没法计算了，请使用其他方法获取尺寸.");
 	// 如果父元素是body元素，则抛出异常
        w = getStyle(e, "width");
		// 调用getStyle()方法，获取父元素的宽度值
        return arguments.callee(e, w , b); 	// 回调函数，实现迭代计算
    }
    else	
        throw new Error("元素或其父元素的尺寸定义了特殊的单位.");
}

</script>
<script>

// 重设元素的样式属性值
// 参数：e表示重设样式的元素，o表示要设置的值，它是一个对象，可以包含多个名值对
// 返回值：重设样式的原属性值，以对象形式返回
function setCSS(e, o){
    var a = {};					// 定义临时对象直接量
    for(var i in o){ 			// 遍历参数对象，传递包含样式设置值
        a[i] = e.style[i]; 		// 先存储样式表中原来的值
        e.style[i] = o[i]; 		// 用参数值覆盖原来的值
    }
    return a; 					// 返回原样式属性值
}
// 恢复元素的样式属性值
// 参数：e表示重设样式的元素，o表示要恢复的值，它是一个对象，可以包含多个名值对
// 返回值：无
function resetCSS(e,o){
    for(var i in o){ 			// 遍历参数对象
        e.style[i] = o[i]; 		// 恢复原来的样式值
    }
}

// 获取元素的存在宽度
// 参数：e表示元素
// 返回值：存在宽度
function getW(e){
    // 如果元素没有隐藏显示，则获取它的宽度，如果offsetWidth属性值存在，则返回该值，否则调用自定义扩展函数getStyle()和fromStyle()获取元素的宽度
    if(getStyle(e,"display") != "none") return e.offsetWidth || 
fromStyle(getStyle(e,"width"));
    var r = setCSS( e, {
	// 如果元素隐藏，则调用setCSS()函数临时显示元素，并存储原始样式属性值
        display:"",
        position:"absolute",
        visibility:"hidden"
    });
    var w = e.offsetWidth || fromStyle(getStyle(e,"width"));
	// 读取元素的宽度值
    resetCSS(e,r); 				// 调用resetCSS()函数恢复元素的样式属性值
    return w; 					// 返回存在宽度
}
// 获取元素的存在高度
// 参数：e表示元素
// 返回值：存在高度
function getH(e){
    // 如果元素没有隐藏显示，则获取它的高度，如果offsetHeight属性值存在，则返回该值，否则调用自定义扩展函数getStyle()和fromStyle()获取元素的高度
    if(getStyle(e,"display") != "none") return e.offsetHeight || 
fromStyle(getStyle(e,"height"));
    var r = setCSS( e, {
	// 如果元素隐藏，则调用setCSS()函数临时显示元素，并存储原始样式属性值
        display:"",
        position:"absolute",
        visibility:"hidden"
    });
    var h = e.offsetHeight || fromStyle(getStyle(e,"height"));
	// 读取元素的高度值
    resetCSS(e,r); 			// 调用resetCSS()函数恢复元素的样式属性值
    return h; 				// 返回存在高度
}


</script>
</head>
<body>

<div id="div" style="height:200px;width:200px;border-style:solid;display:none;"></div>
<script>
var div = document.getElementById("div");
var w = div.offsetWidth; 				// 返回0
var h = div.offsetHeight;			 	// 返回0
var w1 = getW(div); 					// 返回206
var h1 = getH(div); 					// 返回206

alert(w);
alert(w1);
